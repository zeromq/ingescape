# Gitlab ci

# Define job order
stages:
  - lib-build
  - binding-build
  - binding-test
  - lib-installer
  - binding-package
  - deploy
  - delivery

workflow:
  rules:
    - if: $CI_PIPELINE_SOURCE == "web"
      when: always
    - when: never

# Define ingescape library files
.lib-build-files:
  rules:
    - changes:
        - .gitlab-ci.yml
        - src/**/*
        - builds/cmake/**/*
        - dependencies/yajl/**/*
        - dependencies/unix/*
        - dependencies/windows/unix/*
        - CMakeLists.txt

# Global variables. Can be used by any jobs
variables:
  VS_CMAKE_GENERATOR: "Visual Studio 16 2019"

.root_namespace:
  rules:
    - if: '$CI_PROJECT_ROOT_NAMESPACE == "ingescape-private" && $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'

#http://patorjk.com/software/taag/#p=display&f=Big&t=Windows
#                       ____   _____
#                      / __ \ / ____|
# _ __ ___   __ _  ___| |  | | (___
#| '_ ` _ \ / _` |/ __| |  | |\___ \
#| | | | | | (_| | (__| |__| |____) |
#|_| |_| |_|\__,_|\___|\____/|_____/

# Build library for macos
lib-build-macos:
  extends: .lib-build-files
  stage: lib-build
  tags:
    - macos-qt6
  before_script:
    - git -c url."https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.ingescape.com/".insteadOf="ssh://git@gitlab.ingescape.com:22222/" submodule update --init --remote --recursive
  script:
    - git clean -xfd
    - cmake -S . -B build -DCMAKE_BUILD_TYPE=Release -DWITH_DEPS=ON -DOSX_UNIVERSAL=ON
    - make -j8 -C build
    - |
      if [[ $CI_PROJECT_ROOT_NAMESPACE == "ingescape-private" && $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH ]]
      then
        make -C build DESTDIR=$HOME/builds/sysroot install
        make -C build DESTDIR=temp install
        mkdir -p $ARTIFACTS_NET_SHARE/macos/binaries/ingescape
        rm -rf $ARTIFACTS_NET_SHARE/macos/binaries/ingescape/*
        cp -RLf build/temp/usr/local/* $ARTIFACTS_NET_SHARE/macos/binaries/ingescape
      fi
  artifacts:
    paths:
      - ./build
    name: "lib-build-macos"
    expire_in: 1 day

# Create runtime installer for macos
#On runner machine:
#- install Packages from http://s.sudre.free.fr/Software/Packages/about.html
#- get and install pkg signing certificate from apple developer site
#- indicate proper developper id in signing command line below
#- to allow codesign without password, call once: security set-keychain-settings ~/Library/Keychains/login.keychain
#http://s.sudre.free.fr/Software/documentation/Packages/en/Project_Building.html#4
#https://eclecticlight.co/2017/03/08/making-an-installer-package-the-easier-way/
#https://fre.applersg.com/check-packages-expired-certificates-mac-os-x
#https://help.apple.com/xcode/mac/current/#/dev033e997ca
lib-installer-macos:
  extends: .lib-build-files
  stage: lib-installer
  tags:
    - macos-qt6
  script:
    - make -C build package
    #    - packagesbuild ./builds/xcode/ingescape.pkgproj
    #    - mv ./builds/xcode/build/ingescape.pkg ./builds/xcode/build/ingescape_unsigned.pkg
    #    - 'productsign --sign "Developer ID Installer: Ingenuity i/o (56DRT9MG9S)" ./builds/xcode/build/ingescape_unsigned.pkg ./builds/xcode/build/ingescape.pkg'
    - mkdir -p $HOME/builds/packages
    #    - cp ./builds/xcode/build/ingescape.pkg $HOME/builds/packages/
    - cp ./build/ingescape*.pkg $HOME/builds/packages/
  #    - mv ./build/ingescape*.pkg .
  artifacts:
    paths:
      - ./build
    name: "lib-installer-macos"
  dependencies:
    - lib-build-macos
  needs:
    - lib-build-macos

#__          ___           _
#\ \        / (_)         | |
# \ \  /\  / / _ _ __   __| | _____      _____
#  \ \/  \/ / | | '_ \ / _` |/ _ \ \ /\ / / __|
#   \  /\  /  | | | | | (_| | (_) \ V  V /\__ \
#    \/  \/   |_|_| |_|\__,_|\___/ \_/\_/ |___/

# Create ingescape library for windows 64 bits release
lib-windows-release-x64:
  extends: .lib-build-files
  stage: lib-build
  tags:
    - windows
  variables:
    ARCH: "Release_x64"
  before_script:
    - git -c url."https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.ingescape.com/".insteadOf="ssh://git@gitlab.ingescape.com:22222/" submodule update --init --remote --recursive
  script:
    - mkdir build\ReleaseX64
    - cmake -S . -B build\ReleaseX64 -G"$env:VS_CMAKE_GENERATOR" -DCMAKE_BUILD_TYPE=Release -DWITH_DEPS=ON -DWITH_CSHARP_WRAPPER=ON
    - Powershell.exe -executionpolicy remotesigned bindings/csharp/builds/cmake/FixCmakeSolution.ps1 -buildDirectory build/ReleaseX64/bindings/csharp -projectName IngescapeCSharp
    - Powershell.exe -executionpolicy remotesigned bindings/csharp/builds/cmake/FixCmakeSolution.ps1 -buildDirectory build/ReleaseX64/bindings/csharp/test -projectName igstester
    - cmake --build build\ReleaseX64 --target ALL_BUILD --config Release
    - |
      if ( ($env:CI_PROJECT_ROOT_NAMESPACE -eq "ingescape-private") -and ($env:CI_COMMIT_BRANCH -eq $env:CI_DEFAULT_BRANCH) )
      {
        cmake --install .\build\ReleaseX64 --config Release --prefix $env:WORKSPACE_NET_SHARE\Builds\Release\x64
        cmake --install .\build\ReleaseX64 --config Release --prefix $env:ARTIFACTS_NET_SHARE\win64\binaries\ingescape\release
      }
  artifacts:
    paths:
      - build
    name: "lib-windows-release-x64"
    expire_in: 1 day

# Create ingescape library for windows 32 bits release
lib-windows-release-x86:
  extends: .lib-build-files
  stage: lib-build
  tags:
    - windows
  variables:
    ARCH: "Release_x86"
  before_script:
    - git -c url."https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.ingescape.com/".insteadOf="ssh://git@gitlab.ingescape.com:22222/" submodule update --init --remote --recursive
  script:
    - mkdir build\ReleaseX86
    - cmake -S . -B build\ReleaseX86 -G"$env:VS_CMAKE_GENERATOR" -AWin32 -DCMAKE_BUILD_TYPE=Release -DWITH_DEPS=ON -DWITH_CSHARP_WRAPPER=ON
    - Powershell.exe -executionpolicy remotesigned bindings/csharp/builds/cmake/FixCmakeSolution.ps1 -buildDirectory build/ReleaseX86/bindings/csharp -projectName IngescapeCSharp
    - Powershell.exe -executionpolicy remotesigned bindings/csharp/builds/cmake/FixCmakeSolution.ps1 -buildDirectory build/ReleaseX86/bindings/csharp/test -projectName igstester
    - cmake --build build\ReleaseX86 --target ALL_BUILD --config Release
    - |
      if ( ($env:CI_PROJECT_ROOT_NAMESPACE -eq "ingescape-private") -and ($env:CI_COMMIT_BRANCH -eq $env:CI_DEFAULT_BRANCH) )
      {
        cmake --install .\build\ReleaseX86 --config Release --prefix $env:WORKSPACE_NET_SHARE\Builds\Release\x86
        cmake --install .\build\ReleaseX86 --config Release --prefix $env:ARTIFACTS_NET_SHARE\win32\binaries\ingescape\release
      }
  artifacts:
    paths:
      - build
    name: "lib-windows-release-x86"
    expire_in: 1 day

# Create ingescape library for windows 64 bits debug
lib-windows-debug-x64:
  extends: .lib-build-files
  stage: lib-build
  tags:
    - windows
  variables:
    ARCH: "Debug_x64"
  before_script:
    - git -c url."https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.ingescape.com/".insteadOf="ssh://git@gitlab.ingescape.com:22222/" submodule update --init --remote --recursive
  script:
    - mkdir build\DebugX64
    - cmake -S . -B build\DebugX64 -G"$env:VS_CMAKE_GENERATOR" -DCMAKE_BUILD_TYPE=Debug -DWITH_DEPS=ON -DWITH_CSHARP_WRAPPER=ON
    - Powershell.exe -executionpolicy remotesigned bindings/csharp/builds/cmake/FixCmakeSolution.ps1 -buildDirectory build/DebugX64/bindings/csharp -projectName IngescapeCSharp
    - Powershell.exe -executionpolicy remotesigned bindings/csharp/builds/cmake/FixCmakeSolution.ps1 -buildDirectory build/DebugX64/bindings/csharp/test -projectName igstester
    - cmake --build build\DebugX64 --target ALL_BUILD --config Debug
    - |
      if ( ($env:CI_PROJECT_ROOT_NAMESPACE -eq "ingescape-private") -and ($env:CI_COMMIT_BRANCH -eq $env:CI_DEFAULT_BRANCH) )
      {
        cmake --install .\build\DebugX64 --config Debug --prefix $env:WORKSPACE_NET_SHARE\Builds\Debug\x64
        cmake --install .\build\DebugX64 --config Debug --prefix $env:ARTIFACTS_NET_SHARE\win64\binaries\ingescape\debug
      }
  artifacts:
    paths:
      - build
    name: "lib-windows-debug-x64"
    expire_in: 1 day

# Create ingescape library for windows 32 bits debug
lib-windows-debug-x86:
  extends: .lib-build-files
  stage: lib-build
  tags:
    - windows
  variables:
    ARCH: "Debug_x86"
  before_script:
    - git -c url."https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.ingescape.com/".insteadOf="ssh://git@gitlab.ingescape.com:22222/" submodule update --init --remote --recursive
  script:
    - mkdir build\DebugX86
    - cmake -S . -B build\DebugX86 -G"$env:VS_CMAKE_GENERATOR" -AWin32 -DCMAKE_BUILD_TYPE=Debug -DWITH_DEPS=ON -DWITH_CSHARP_WRAPPER=ON
    - Powershell.exe -executionpolicy remotesigned bindings/csharp/builds/cmake/FixCmakeSolution.ps1 -buildDirectory build/DebugX86/bindings/csharp -projectName IngescapeCSharp
    - Powershell.exe -executionpolicy remotesigned bindings/csharp/builds/cmake/FixCmakeSolution.ps1 -buildDirectory build/DebugX86/bindings/csharp/test -projectName igstester
    - cmake --build build\DebugX86 --target ALL_BUILD --config Debug
    - |
      if ( ($env:CI_PROJECT_ROOT_NAMESPACE -eq "ingescape-private") -and ($env:CI_COMMIT_BRANCH -eq $env:CI_DEFAULT_BRANCH) )
      {
        cmake --install .\build\DebugX86 --config Debug --prefix $env:WORKSPACE_NET_SHARE\Builds\Debug\x86
        cmake --install .\build\DebugX86 --config Debug --prefix $env:ARTIFACTS_NET_SHARE\win32\binaries\ingescape\debug
      }
  artifacts:
    paths:
      - build
    name: "lib-windows-debug-x86"
    expire_in: 1 day

# Create runtime install for windows 32 bits
lib-installer-release-windows-x86:
  extends: .lib-build-files
  stage: lib-installer
  variables:
    ARCH: "Release_x86"
  tags:
    - windows
  script:
    - cd build\ReleaseX86
    - cpack --config CPackConfig.cmake
    - cd ..\..
    - |
      if ( ($env:CI_PROJECT_ROOT_NAMESPACE -eq "ingescape-private") -and ($env:CI_COMMIT_BRANCH -eq $env:CI_DEFAULT_BRANCH) )
      {
        mkdir $env:ARTIFACTS_NET_SHARE\win32\packages\ingescape\release -fo
        cp build\ReleaseX86\ingescape-*.exe $env:ARTIFACTS_NET_SHARE\win32\packages\ingescape\release -Force
        cp build\ReleaseX86\ingescape-*.zip $env:ARTIFACTS_NET_SHARE\win32\packages\ingescape\release -Force
      }
  artifacts:
    paths:
      - build\ReleaseX86\ingescape-*.exe
      - build\ReleaseX86\ingescape-*.zip
    name: "lib-installer-release-windows-x86"
  dependencies:
    - lib-windows-release-x86
  needs:
    - lib-windows-release-x86
    - test-csharp-x86-release

# Create runtime install for windows 64 bits
lib-installer-release-windows-x64:
  extends: .lib-build-files
  stage: lib-installer
  variables:
    ARCH: "Release_x64"
  tags:
    - windows
  script:
    - cd build\ReleaseX64
    - cpack --config CPackConfig.cmake
    - cd ..\..
    - |
      if ( ($env:CI_PROJECT_ROOT_NAMESPACE -eq "ingescape-private") -and ($env:CI_COMMIT_BRANCH -eq $env:CI_DEFAULT_BRANCH) )
      {
        mkdir $env:ARTIFACTS_NET_SHARE\win64\packages\ingescape\release -fo
        cp build\ReleaseX64\ingescape-*.exe $env:ARTIFACTS_NET_SHARE\win64\packages\ingescape\release -Force
        cp build\ReleaseX64\ingescape-*.zip $env:ARTIFACTS_NET_SHARE\win64\packages\ingescape\release -Force
      }
  artifacts:
    paths:
      - build\ReleaseX64\ingescape-*.exe
      - build\ReleaseX64\ingescape-*.zip
    name: "lib-installer-release-windows-x64"
  dependencies:
    - lib-windows-release-x64
  needs:
    - lib-windows-release-x64
    - test-csharp-x64-release

# Create runtime install for windows 32 bits (debug)
lib-installer-debug-windows-x86:
  extends: .lib-build-files
  stage: lib-installer
  variables:
    ARCH: "Debug_x86"
  tags:
    - windows
  script:
    - cd build\DebugX86
    - cpack --config CPackConfig.cmake -C Debug
    - cd ..\..
    - |
      if ( ($env:CI_PROJECT_ROOT_NAMESPACE -eq "ingescape-private") -and ($env:CI_COMMIT_BRANCH -eq $env:CI_DEFAULT_BRANCH) )
      {
        mkdir $env:ARTIFACTS_NET_SHARE\win32\packages\ingescape\debug -fo
        cp build\DebugX86\ingescape-*.exe $env:ARTIFACTS_NET_SHARE\win32\packages\ingescape\debug -Force
        cp build\DebugX86\ingescape-*.zip $env:ARTIFACTS_NET_SHARE\win32\packages\ingescape\debug -Force
      }
  artifacts:
    paths:
      - build\DebugX86\ingescape-*.exe
      - build\DebugX86\ingescape-*.zip
    name: "lib-installer-debug-windows-x86"
  dependencies:
    - lib-windows-debug-x86
  needs:
    - lib-windows-debug-x86
    - test-csharp-x86-debug

# Create runtime install for windows 64 bits (debug)
lib-installer-debug-windows-x64:
  extends: .lib-build-files
  stage: lib-installer
  variables:
    ARCH: "Debug_x64"
  tags:
    - windows
  script:
    - cd build\DebugX64
    - cpack --config CPackConfig.cmake -C Debug
    - cd ..\..
    - |
      if ( ($env:CI_PROJECT_ROOT_NAMESPACE -eq "ingescape-private") -and ($env:CI_COMMIT_BRANCH -eq $env:CI_DEFAULT_BRANCH) )
      {
        mkdir $env:ARTIFACTS_NET_SHARE\win64\packages\ingescape\debug -fo
        cp build\DebugX64\ingescape-*.exe $env:ARTIFACTS_NET_SHARE\win64\packages\ingescape\debug -Force
        cp build\DebugX64\ingescape-*.zip $env:ARTIFACTS_NET_SHARE\win64\packages\ingescape\debug -Force
      }
  artifacts:
    paths:
      - build\DebugX64\ingescape-*.exe
      - build\DebugX64\ingescape-*.zip
    name: "lib-installer-debug-windows-x64"
  dependencies:
    - lib-windows-debug-x64
  needs:
    - lib-windows-debug-x64
    - test-csharp-x64-debug

# _      _
#| |    (_)
#| |     _ _ __  _   ___  __
#| |    | | '_ \| | | \ \/ /
#| |____| | | | | |_| |>  <
#|______|_|_| |_|\__,_/_/\_\

##
## x64
##

# Create ingescape library for linux (x64) from our custom libraries
lib-build-linux-x64:
  extends: .lib-build-files
  stage: lib-build
  image: ingescape/debian-testing-compil
  tags:
    - docker
  variables:
    GIT_STRATEGY: clone
  before_script:
    - git -c url."https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.ingescape.com/".insteadOf="ssh://git@gitlab.ingescape.com:22222/" submodule update --init --remote --recursive
  script:
    - mkdir -p build
    - cmake -S . -B build -DCMAKE_BUILD_TYPE=Release -DWITH_DEPS=ON
    - make -C build
    - |
      if [[ $CI_PROJECT_ROOT_NAMESPACE == "ingescape-private" && $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH ]]
      then
        make -C build DESTDIR=$HOME/builds/release/linux_x64/ install
        make -C build DESTDIR=temp install
        mkdir -p $ARTIFACTS_NET_SHARE/linux64/binaries/ingescape
        rm -rf $ARTIFACTS_NET_SHARE/linux64/binaries/ingescape/*
        cp -rLf build/temp/usr/local/* $ARTIFACTS_NET_SHARE/linux64/binaries/ingescape
      fi
  artifacts:
    paths:
      - ./build
    name: "lib-build-linux-x64"
    expire_in: 1 day

# Create library installer for linux 64 bits
lib-installer-linux-x64:
  extends: .lib-build-files
  stage: lib-installer
  image: ingescape/debian-testing-compil
  tags:
    - docker
  variables:
    GIT_STRATEGY: clone
  before_script:
    - git -c url."https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.ingescape.com/".insteadOf="ssh://git@gitlab.ingescape.com:22222/" submodule update --init --remote --recursive
  script:
    - export INGESCAPE_MAJOR=$(grep "#define INGESCAPE_VERSION_MAJOR" include/ingescape.h | cut -d ' ' -f3-)
    - export INGESCAPE_MINOR=$(grep "#define INGESCAPE_VERSION_MINOR" include/ingescape.h | cut -d ' ' -f3-)
    - export INGESCAPE_PATCH=$(grep "#define INGESCAPE_VERSION_PATCH" include/ingescape.h | cut -d ' ' -f3-)
    - export INGESCAPE_VERSION=$INGESCAPE_MAJOR.$INGESCAPE_MINOR.$INGESCAPE_PATCH
    - cmake -S . -B build -DCMAKE_BUILD_TYPE=Release -DWITH_DEPS=ON -DPACK_TGZ=ON
    - cd build
    - make package
    - tar xf ingescape-${INGESCAPE_VERSION}-Linux.tar.gz
    - makeself --target /tmp/ingescape-${INGESCAPE_VERSION} ingescape-${INGESCAPE_VERSION}-Linux installer-ingescape-${INGESCAPE_VERSION}-linux-x64.run "Ingescape library v${INGESCAPE_VERSION}" ./install_script.sh
    - cd ..
    - |
      if [[ $CI_PROJECT_ROOT_NAMESPACE == "ingescape-private" && $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH ]]
      then
        mkdir -p $ARTIFACTS_NET_SHARE/linux64/packages/ingescape
        cp build/installer-ingescape-*.run $ARTIFACTS_NET_SHARE/linux64/packages/ingescape
      fi
    - mv build linux_x64
  artifacts:
    paths:
      - ./linux_x64/installer-ingescape-*.run
    name: "lib-installer-linux-x64"
  dependencies:
    - lib-build-linux-x64
  needs:
    - lib-build-linux-x64

##
## armhf (RPi)
##

# Create ingescape library for linux (armv7/armhf)
lib-linux-release-armhf:
  extends: .lib-build-files
  stage: lib-build
  tags:
    - docker
  image: ingescape/ubuntu-x-compil-rpi
  variables:
    GIT_STRATEGY: clone
  before_script:
    - git -c url."https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.ingescape.com/".insteadOf="ssh://git@gitlab.ingescape.com:22222/" submodule update --init --remote --recursive
  script:
    - git clean -xfd
    - mkdir build
    - cmake -S . -B build -DCMAKE_BUILD_TYPE=Release -DWITH_DEPS=ON -DCMAKE_TOOLCHAIN_FILE=/toolchain.cmake
    - make -C build
    - |
      if [[ $CI_PROJECT_ROOT_NAMESPACE == "ingescape-private" && $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH ]]
      then
        make -C build install DESTDIR=~/builds/release/armhf
        make -C build DESTDIR=temp install
        mkdir -p $ARTIFACTS_NET_SHARE/linuxARMHF/binaries/ingescape
        rm -rf $ARTIFACTS_NET_SHARE/linuxARMHF/binaries/ingescape/*
        cp -rLf build/temp/usr/local/* $ARTIFACTS_NET_SHARE/linuxARMHF/binaries/ingescape
      fi
  artifacts:
    paths:
      - ./build
    name: "lib-linux-release-armhf"
    expire_in: 1 day

# Create runtime install for linux ARMv7 (armhf) - Generic ZIP
lib-installer-runtime-linux-armhf:
  extends: .lib-build-files
  stage: lib-installer
  tags:
    - docker
  image: ingescape/ubuntu-x-compil-rpi
  variables:
    GIT_STRATEGY: clone
  before_script:
    - git -c url."https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.ingescape.com/".insteadOf="ssh://git@gitlab.ingescape.com:22222/" submodule update --init --remote --recursive
  script:
    - export INGESCAPE_MAJOR=$(grep "#define INGESCAPE_VERSION_MAJOR" include/ingescape.h | cut -d ' ' -f3-)
    - export INGESCAPE_MINOR=$(grep "#define INGESCAPE_VERSION_MINOR" include/ingescape.h | cut -d ' ' -f3-)
    - export INGESCAPE_PATCH=$(grep "#define INGESCAPE_VERSION_PATCH" include/ingescape.h | cut -d ' ' -f3-)
    - export INGESCAPE_VERSION=$INGESCAPE_MAJOR.$INGESCAPE_MINOR.$INGESCAPE_PATCH
    - cmake -S . -B build -DCMAKE_BUILD_TYPE=Release -DWITH_DEPS=ON -DPACK_TGZ=ON
    - cd build
    - make package
    - tar xf ingescape-${INGESCAPE_VERSION}-Linux.tar.gz
    - makeself --target /tmp/ingescape-${INGESCAPE_VERSION} ingescape-${INGESCAPE_VERSION}-Linux installer-ingescape-${INGESCAPE_VERSION}-linux-armhf.run "Ingescape library v${INGESCAPE_VERSION}" ./install_script.sh
    - cd ..
    - |
      if [[ $CI_PROJECT_ROOT_NAMESPACE == "ingescape-private" && $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH ]]
      then
        mkdir mkdir -p $ARTIFACTS_NET_SHARE/linuxARMHF/packages/ingescape
        cp build/installer-ingescape-*.run $ARTIFACTS_NET_SHARE/linuxARMHF/packages/ingescape
      fi
    - mv build linux_armhf
  artifacts:
    paths:
      - ./linux_armhf/installer-ingescape-*.run
    name: "lib-installer-runtime-linux-armhf"
  dependencies:
    - lib-linux-release-armhf
  needs:
    - lib-linux-release-armhf

##
## aarch64 (Android)
##

# Create ingescape library for Android (aarch64)
lib-android-release-aarch64:
  extends: .lib-build-files
  stage: lib-build
  tags:
    - docker
  image: ingescape/ubuntu-x-compil-android-aarch64
  variables:
    GIT_STRATEGY: clone
  before_script:
    - git -c url."https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.ingescape.com/".insteadOf="ssh://git@gitlab.ingescape.com:22222/" submodule update --init --remote --recursive
  script:
    - git clean -xfd
    - mkdir build
    - cmake -S . -B build -DCMAKE_BUILD_TYPE=Release -DWITH_DEPS=ON -DCMAKE_TOOLCHAIN_FILE=/${ANDROID_NDK_TOOLCHAIN_FILE}
    - make -C build
    - |
      if [[ $CI_PROJECT_ROOT_NAMESPACE == "ingescape-private" && $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH ]]
      then
        make -C build install DESTDIR=~/builds/release/aarch64
        make -C build DESTDIR=temp install
        mkdir -p $ARTIFACTS_NET_SHARE/armAARCH64/binaries/ingescape
        rm -rf $ARTIFACTS_NET_SHARE/armAARCH64/binaries/ingescape/*
        cp -rLf build/temp/usr/local/* $ARTIFACTS_NET_SHARE/armAARCH64/binaries/ingescape
      fi
  artifacts:
    paths:
      - build
    name: "lib-android-release-aarch64"
    expire_in: 1 day

# Create runtime install for Android (aarch64) - Generic ZIP
lib-installer-runtime-android-aarch64:
  extends: .lib-build-files
  stage: lib-installer
  tags:
    - docker
  image: ingescape/ubuntu-x-compil-android-aarch64
  variables:
    GIT_STRATEGY: clone
  before_script:
    - git -c url."https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.ingescape.com/".insteadOf="ssh://git@gitlab.ingescape.com:22222/" submodule update --init --remote --recursive
  script:
    - make -C build package
    - mv _packages android-arm64
    - |
      if [[ $CI_PROJECT_ROOT_NAMESPACE == "ingescape-private" && $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH ]]
      then
        mkdir -p $ARTIFACTS_NET_SHARE/armAARCH64/packages/ingescape
        cp android-arm64/ingescape-* $ARTIFACTS_NET_SHARE/armAARCH64/packages/ingescape
      fi
  artifacts:
    paths:
      - android-arm64/ingescape-*
    name: "lib-installer-runtime-android-aarch64"
  dependencies:
    - lib-android-release-aarch64
  needs:
    - lib-android-release-aarch64

##
## armv7a (Android)
##

# Create ingescape library for Android (armv7a softfp)
lib-android-release-armv7a-softfp:
  extends: .lib-build-files
  stage: lib-build
  tags:
    - docker
  image: ingescape/ubuntu-x-compil-android
  variables:
    GIT_STRATEGY: clone
  before_script:
    - git -c url."https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.ingescape.com/".insteadOf="ssh://git@gitlab.ingescape.com:22222/" submodule update --init --remote --recursive
  script:
    - git clean -xfd
    - mkdir build
    - cmake -S . -B build -DCMAKE_BUILD_TYPE=Release -DWITH_DEPS=ON -DCMAKE_TOOLCHAIN_FILE=/${ANDROID_NDK_TOOLCHAIN_FILE}
    - make -C build
    - |
      if [[ $CI_PROJECT_ROOT_NAMESPACE == "ingescape-private" && $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH ]]
      then
        make -C build install DESTDIR=~/builds/release/armv7a-sf
        make -C build DESTDIR=temp install
        mkdir -p $ARTIFACTS_NET_SHARE/armARMV7/binaries/ingescape
        rm -rf $ARTIFACTS_NET_SHARE/armARMV7/binaries/ingescape/*
        cp -rLf build/temp/usr/local/* $ARTIFACTS_NET_SHARE/armARMV7/binaries/ingescape
      fi
  artifacts:
    paths:
      - build
    name: "lib-android-release-armv7a-softfp"
    expire_in: 1 day

# Create runtime install for Android (armv7a softfp) - Generic ZIP
lib-installer-runtime-android-armv7a-softfp:
  extends: .lib-build-files
  stage: lib-installer
  tags:
    - docker
  image: ingescape/ubuntu-x-compil-android
  variables:
    GIT_STRATEGY: clone
  before_script:
    - git -c url."https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.ingescape.com/".insteadOf="ssh://git@gitlab.ingescape.com:22222/" submodule update --init --remote --recursive
  script:
    - make -C build package
    - mv _packages android
    - |
      if [[ $CI_PROJECT_ROOT_NAMESPACE == "ingescape-private" && $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH ]]
      then
        mkdir mkdir -p $ARTIFACTS_NET_SHARE/armARMV7/packages/ingescape
        cp android/ingescape-* $ARTIFACTS_NET_SHARE/armARMV7/packages/ingescape
      fi
  artifacts:
    paths:
      - android/ingescape-*
    name: "lib-installer-runtime-android-armv7a-softfp"
  dependencies:
    - lib-android-release-armv7a-softfp
  needs:
    - lib-android-release-armv7a-softfp

##
## Debian (.deb package)
##

build-deb-packages:
  extends: .lib-build-files
  stage: delivery
  tags:
    - docker
  image: debian:10
  variables:
    GIT_STRATEGY: clone
  script:
    - apt-get update || apt-get update
    - apt-get install -y build-essential file git tree rsync wget libssl-dev libcurl4-openssl-dev
    - wget -qO- https://github.com/Kitware/CMake/releases/download/v3.22.2/cmake-3.22.2.tar.gz | tar xfz -
    - (cd cmake-3.22.2 ; ./bootstrap && make -j6 && make install)
    - git -c url."https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.ingescape.com/".insteadOf="ssh://git@gitlab.ingescape.com:22222/" submodule update --init --remote --recursive
    - mkdir debian_x64
    - echo "Release build"
    - cmake -S . -B b -DWITH_DEPS=ON -DCMAKE_BUILD_TYPE=Release -DCPACK_COMPONENTS_ALL="Unspecified;library"
    - cmake --build b --parallel 6
    - (cd b && cpack -G DEB)
    - (cd _packages && dpkg-deb -R ingescape-dev*.deb p && tree p && rm -rf p)
    - mv _packages/ingescape-dev*.deb debian_x64
    - echo "Release build -no-strip"
    - cmake -S . -B b_no_strip -DWITH_DEPS=ON -DCMAKE_BUILD_TYPE=Release -DDEB_NO_STRIP=ON -DCPACK_COMPONENTS_ALL="Unspecified;library"
    - cmake --build b_no_strip --parallel 6
    - (cd b_no_strip && cpack -G DEB)
    - (cd _packages && dpkg-deb -R ingescape-no-strip-dev*.deb p && tree p && rm -rf p)
    - mv _packages/ingescape-no-strip-dev*.deb debian_x64
    - echo "Debug build"
    - cmake -S . -B b_debug -DWITH_DEPS=ON -DCMAKE_BUILD_TYPE=Debug -DCPACK_COMPONENTS_ALL="Unspecified;library"
    - cmake --build b_debug --parallel 6
    - (cd b_debug && cpack -G DEB)
    - (cd _packages && dpkg-deb -R ingescape-debug-dev*.deb p && tree p && rm -rf p)
    - mv _packages/ingescape-debug-dev*.deb debian_x64
    - cp debian_x64/* $ARTIFACTS_NET_SHARE/linux64/packages/ingescape
    - echo "Setting up SSH"
    - mkdir -p ~/.ssh/
    - ssh-keyscan ${STABLE_DELIVERY_HOST} >> ~/.ssh/known_hosts
    - umask 077
    - echo ${STABLE_SSH_SECRET} | base64 -d > ssh_secret
    - umask 022
    - echo "Push to repo"
    - ssh -i ssh_secret ${STABLE_DELIVERY_USER}@${STABLE_DELIVERY_HOST} echo Connected
    - rsync --rsh="ssh -i ssh_secret" debian_x64/ingescape*.deb ${STABLE_DELIVERY_USER}@${STABLE_DELIVERY_HOST}:/home/ingescape/domains/repository.ingescape.com/public_html/debian/pool/main
    - ssh -i ssh_secret ${STABLE_DELIVERY_USER}@${STABLE_DELIVERY_HOST} /home/ingescape/domains/repository.ingescape.com/refresh_deb_repo.sh
  dependencies: []
  needs: []
  artifacts:
    paths:
      - debian_x64/ingescape*.deb
    name: "ingescape-dev-debian-package"
  rules:
    - !reference [.root_namespace, rules]

update-vm-runners:
  stage: delivery
  tags:
    - docker
  image: alpine:latest
  when: manual
  script:
    - echo "Setup SSH context"
    - apk add openssh
    - mkdir -p ~/.ssh
    - ssh-keyscan ${UBUNTU_18_04_RUNNER} >> ~/.ssh/known_hosts
    - ssh-keyscan ${DEBIAN_11_RUNNER} >> ~/.ssh/known_hosts
    - umask 077
    - echo ${SSH_SECRET} | base64 -d > ssh_secret
    - umask 022
    - echo "Upgrade ingescape for Ubuntu 18.04 VM runner (Circle linux build)"
    - ssh -i ssh_secret root@${UBUNTU_18_04_RUNNER} apt-get update
    - ssh -i ssh_secret root@${UBUNTU_18_04_RUNNER} apt-get install --reinstall ingescape-dev -y
    - echo "Upgrade ingescape for Debian 11 VM runner (CCU GUIs linux build)"
    - ssh -i ssh_secret root@${DEBIAN_11_RUNNER} apt-get update
    - ssh -i ssh_secret root@${DEBIAN_11_RUNNER} apt-get install --reinstall ingescape-dev -y
  dependencies: []
  needs: []
  rules:
    - !reference [.root_namespace, rules]

#   _   _           _             _  _____
#  | \ | |         | |           | |/ ____|
#  |  \| | ___   __| | ___       | | (___
#  | . ` |/ _ \ / _` |/ _ \  _   | |\___ \
#  | |\  | (_) | (_| |  __/ | |__| |____) |
#  |_| \_|\___/ \__,_|\___|  \____/|_____/

## Builds
binding-node-js-macos:
  stage: binding-build
  tags:
    - macos-qt6
  before_script:
    - git -c url."https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.ingescape.com/".insteadOf="ssh://git@gitlab.ingescape.com:22222/" submodule update --init --remote --recursive
  script:
    - cd ./bindings/javascript-node/
    - mkdir -p ./dependencies/lib
    - mkdir -p ./dependencies/include
    - cp ../../build/libingescape.a  ./dependencies/lib
    - cp ../../build/dependencies/czmq/libczmq.a ./dependencies/lib
    - cp ../../build/dependencies/libzmq/lib/libzmq.a ./dependencies/lib
    - cp ../../build/dependencies/zyre/libzyre.a ./dependencies/lib
    - cp ../../build/dependencies/sodium//libsodium.a ./dependencies/lib
    - cp -r ../../include/* ./dependencies/include
    - cp -r ../../dependencies/czmq/include/* ./dependencies/include
    - cp -r ../../dependencies/libzmq/include/* ./dependencies/include
    - cp -r ../../dependencies/sodium/src/libsodium/include/* ./dependencies/include
    - cp -r ../../dependencies/zyre/include/* ./dependencies/include
    - ./prepare_version.sh
    - sed -i .bak 's@/usr/local@<!(echo $PWD)/dependencies@g' binding.gyp #update file paths for igs
    - cat ./binding.gyp
    - npm install -g prebuildify
    - export PREBUILD_ARCH=x64
    - npm run build --from_sources=1
    - export PREBUILD_ARCH=arm64
    - npm run build --from_sources=1
  artifacts:
    paths:
      - bindings/javascript-node/prebuilds
  dependencies:
    - lib-build-macos
  needs:
    - lib-build-macos

binding-node-js-linux:
  stage: binding-build
  tags:
    - docker
  image: ingescape/ubuntu18.04-node
  variables:
    GIT_STRATEGY: clone
  before_script:
    - git -c url."https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.ingescape.com/".insteadOf="ssh://git@gitlab.ingescape.com:22222/" submodule update --init --remote --recursive
  script:
    - cd ./bindings/javascript-node/
    - mkdir -p ./dependencies/lib
    - mkdir -p ./dependencies/include
    - cp ../../build/libingescape.a  ./dependencies/lib
    - cp ../../build/dependencies/czmq/libczmq.a ./dependencies/lib
    - cp ../../build/dependencies/libzmq/lib/libzmq.a ./dependencies/lib
    - cp ../../build/dependencies/zyre/libzyre.a ./dependencies/lib
    - cp ../../build/dependencies/sodium//libsodium.a ./dependencies/lib
    - cp -r ../../include/* ./dependencies/include
    - cp -r ../../dependencies/czmq/include/* ./dependencies/include
    - cp -r ../../dependencies/libzmq/include/* ./dependencies/include
    - cp -r ../../dependencies/sodium/src/libsodium/include/* ./dependencies/include
    - cp -r ../../dependencies/zyre/include/* ./dependencies/include
    - ./prepare_version.sh
    - sed -i.bak 's@/usr/local@<!(echo $PWD)/dependencies@g' binding.gyp #update file paths for igs
    - cat ./binding.gyp
    - npm install -g prebuildify
    - npm run build --from_sources=1
  artifacts:
    paths:
      - bindings/javascript-node/prebuilds
  dependencies:
    - lib-build-linux-x64
  needs:
    - lib-build-linux-x64

binding-node-js-windows:
  stage: binding-build
  tags:
    - windows
  before_script:
    - git -c url."https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.ingescape.com/".insteadOf="ssh://git@gitlab.ingescape.com:22222/" submodule update --init --remote --recursive
  script:
    - cd ./bindings/javascript-node/
    - mkdir ./dependencies/windows/lib
    - mkdir ./dependencies/windows/include
    - Copy-Item -Path ..\..\build\ReleaseX64\Release\libingescape.lib -Destination ./dependencies/windows/lib
    - Copy-Item -Path ..\..\build\ReleaseX64\dependencies\czmq\Release\libczmq.lib -Destination ./dependencies/windows/lib
    - Copy-Item -Path ..\..\build\ReleaseX64\dependencies\libzmq\lib\Release\libzmq-v142-mt-s-4_3_6.lib -Destination ./dependencies/windows/lib
    - Copy-Item -Path ..\..\build\ReleaseX64\dependencies\zyre\Release\libzyre.lib -Destination ./dependencies/windows/lib
    - Copy-Item -Path ..\..\build\ReleaseX64\dependencies\sodium\Release\libsodium.lib -Destination ./dependencies/windows/lib
    - Xcopy ..\..\include .\dependencies\windows\include\ /E /y
    - Xcopy ..\..\dependencies\czmq\include .\dependencies\windows\include\ /E /y
    - Xcopy ..\..\dependencies\libzmq\include .\dependencies\windows\include\ /E /y
    - Xcopy ..\..\dependencies\sodium\src\libsodium\include .\dependencies\windows\include\ /E /y
    - Xcopy ..\..\dependencies\zyre\include .\dependencies\windows\include\ /E /y
    - $CORRECT_PWD = $PWD -replace "\\", "\\"
    - ./prepare_version.ps1
    - (Get-Content -path .\binding.gyp -Raw) -replace 'C:\\\\Program Files\\\\ingescape\\\\library',"$CORRECT_PWD\\dependencies\\windows" | Set-Content .\binding.gyp #update file paths for igs
    - npm install -g prebuildify
    - if (Test-Path C:\Users\admin\AppData\Local\Temp\prebuildify) { Remove-Item C:\Users\admin\AppData\Local\Temp\prebuildify -Force -Recurse } #To force prebuildify to re-upload its temporary cache
    - npm config set python C:\Users\admin\AppData\Local\Programs\Python\Python310\python.exe
    - npm run build --msvs_version=2019 --from_sources=1 --verbose
  artifacts:
    paths:
      - bindings/javascript-node/prebuilds
  dependencies:
    - lib-windows-release-x64
  needs:
    - lib-windows-release-x64

## Tests
test-node-js-macos:
  stage: binding-test
  tags:
    - macos-qt6
  script:
    - cd ./bindings/javascript-node/
    - npm run test --from_sources=1
  dependencies:
    - binding-node-js-macos
  needs:
    - binding-node-js-macos

test-node-js-linux:
  stage: binding-test
  tags:
    - docker
  image: ingescape/ubuntu18.04-node
  variables:
    GIT_STRATEGY: clone
  script:
    - cd ./bindings/javascript-node/
    - npm run test --from_sources=1
  dependencies:
    - binding-node-js-linux
  needs:
    - binding-node-js-linux

test-node-js-windows:
  stage: binding-test
  tags:
    - windows
  script:
    - cd ./bindings/javascript-node/
    - npm run test --from_sources=1
  dependencies:
    - binding-node-js-windows
  needs:
    - binding-node-js-windows

## Deploy
deploy-node-js:
  stage: deploy
  tags:
    - docker
  image: ingescape/ubuntu18.04-node
  variables:
    GIT_STRATEGY: clone
  when: manual
  allow_failure: true
  script:
    - echo "//registry.npmjs.org/:_authToken=${NPM_AUTH_TOKEN}" > ~/.npmrc
    - cd bindings/javascript-node
    - ./prepare_version.sh
    - npm publish
  dependencies:
    - binding-node-js-macos
    - binding-node-js-linux
    - binding-node-js-windows
  needs:
    - binding-node-js-macos
    - binding-node-js-linux
    - binding-node-js-windows
  rules:
    - !reference [.root_namespace, rules]

#   _____       _   _
#  |  __ \     | | | |
#  | |__) |   _| |_| |__   ___  _ __
#  |  ___/ | | | __| '_ \ / _ \| '_ \
#  | |   | |_| | |_| | | | (_) | | | |
#  |_|    \__, |\__|_| |_|\___/|_| |_|
#          __/ |
#         |___/

#Tests
test-python:
  stage: binding-test
  tags:
    - docker
  image: ingescape/python-cmake
  variables:
    GIT_STRATEGY: clone
  before_script:
    - git -c url."https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.ingescape.com/".insteadOf="ssh://git@gitlab.ingescape.com:22222/" submodule update --init --remote --recursive
  script:
    - cd bindings/python
    - export PLATFORM="linux"
    - ./prepare_for_packaging.sh
    - ./tests/run_tests.sh
  artifacts:
    paths:
      - bindings/python/dependencies/*
      - bindings/python/pyproject.toml
      - bindings/python/setup.py
  dependencies:
    - lib-build-linux-x64
  needs:
    - lib-build-linux-x64

## Package
package-python-wheels-windows:
  stage: binding-package
  variables:
    ARCH: "x64"
  tags:
    - windows
  before_script:
    - git -c url."https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.ingescape.com/".insteadOf="ssh://git@gitlab.ingescape.com:22222/" submodule update --init --remote --recursive
  script:
    - cd ./bindings/python/
    - .\prepare_for_packaging.ps1
    - C:\Users\admin\AppData\Local\Programs\Python\Python38\python.exe -m pip install --upgrade build
    - C:\Users\admin\AppData\Local\Programs\Python\Python38\python.exe -m build
    - C:\Users\admin\AppData\Local\Programs\Python\Python39\python.exe -m pip install --upgrade build
    - C:\Users\admin\AppData\Local\Programs\Python\Python39\python.exe -m build
    - C:\Users\admin\AppData\Local\Programs\Python\Python310\python.exe -m pip install --upgrade build
    - C:\Users\admin\AppData\Local\Programs\Python\Python310\python.exe -m build
    - C:\Users\admin\AppData\Local\Programs\Python\Python311\python.exe -m pip install --upgrade build
    - C:\Users\admin\AppData\Local\Programs\Python\Python311\python.exe -m build
    - C:\Users\admin\AppData\Local\Programs\Python\Python312\python.exe -m pip install --upgrade build
    - C:\Users\admin\AppData\Local\Programs\Python\Python312\python.exe -m build
  dependencies:
    - lib-windows-release-x64
  needs:
    - test-python
    - lib-windows-release-x64
  artifacts:
    paths:
      - bindings/python/dist/*
      - bindings/python/dependencies/*

package-python-wheels-macos:
  stage: binding-package
  tags:
    - macos-qt6
  before_script:
    - git -c url."https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.ingescape.com/".insteadOf="ssh://git@gitlab.ingescape.com:22222/" submodule update --init --remote --recursive
  script:
    - cd ./bindings/python/
    - export PLATFORM="macos"
    - ./prepare_for_packaging.sh
    - /Library/Frameworks/Python.framework/Versions/3.8/bin/python3 -m pip install --upgrade build
    - /Library/Frameworks/Python.framework/Versions/3.8/bin/python3 -m build
    - /Library/Frameworks/Python.framework/Versions/3.9/bin/python3 -m pip install --upgrade build
    - /Library/Frameworks/Python.framework/Versions/3.9/bin/python3 -m build
    - /Library/Frameworks/Python.framework/Versions/3.10/bin/python3 -m pip install --upgrade build
    - /Library/Frameworks/Python.framework/Versions/3.10/bin/python3 -m build
    - /Library/Frameworks/Python.framework/Versions/3.11/bin/python3 -m pip install --upgrade build
    - /Library/Frameworks/Python.framework/Versions/3.11/bin/python3 -m build
    - /Library/Frameworks/Python.framework/Versions/3.12/bin/python3 -m pip install --upgrade build
    - /Library/Frameworks/Python.framework/Versions/3.12/bin/python3 -m build
  dependencies:
    - lib-build-macos
  needs:
    - test-python
    - lib-build-macos
  artifacts:
    paths:
      - bindings/python/dist/*
      - bindings/python/dependencies/*

package-python-wheels-manylinux_2_24_x86_64:
  stage: binding-package
  tags:
    - docker
  image: quay.io/pypa/manylinux_2_24_x86_64
  variables:
    GIT_STRATEGY: clone
  before_script:
    - git -c url."https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.ingescape.com/".insteadOf="ssh://git@gitlab.ingescape.com:22222/" submodule update --init --remote --recursive
  script:
    - cd ./bindings/python/
    - mkdir -p ./dependencies/linux/
    - export PLATFORM="linux"
    - ./prepare_for_packaging.sh
    - python3.8  -m pip install --upgrade build
    - python3.8  -m build
    - python3.9  -m pip install --upgrade build
    - python3.9  -m build
    - python3.10 -m pip install --upgrade build
    - python3.10 -m build
    - python3.11 -m pip install --upgrade build
    - python3.11 -m build
    - |
      for whl in dist/*.whl; do
        auditwheel repair "$whl" --plat "manylinux_2_24_x86_64" -w ./wheelhouse/
      done
  dependencies:
    - lib-build-linux-x64
  needs:
    - test-python
    - lib-build-linux-x64
  artifacts:
    paths:
      - bindings/python/wheelhouse/*
      - bindings/python/dependencies/*

package-python-wheels-manylinux2014_x86_64:
  stage: binding-package
  tags:
    - docker
  image: quay.io/pypa/manylinux2014_x86_64
  variables:
    GIT_STRATEGY: clone
  before_script:
    - git -c url."https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.ingescape.com/".insteadOf="ssh://git@gitlab.ingescape.com:22222/" submodule update --init --remote --recursive
  script:
    - cd ./bindings/python/
    - export PLATFORM="linux"
    - ./prepare_for_packaging.sh
    - python3.8  -m pip install --upgrade build
    - python3.8  -m build
    - python3.9  -m pip install --upgrade build
    - python3.9  -m build
    - python3.10 -m pip install --upgrade build
    - python3.10 -m build
    - python3.11 -m pip install --upgrade build
    - python3.11 -m build
    - |
      for whl in dist/*.whl; do
        auditwheel repair "$whl" --plat "manylinux2014_x86_64" -w ./wheelhouse/
      done
  dependencies:
    - lib-build-linux-x64
  needs:
    - test-python
    - lib-build-linux-x64
  artifacts:
    paths:
      - bindings/python/wheelhouse/*

package-python-wheels-manylinux2010_x86_64:
  stage: binding-package
  tags:
    - docker
  image: quay.io/pypa/manylinux2010_x86_64
  variables:
    GIT_STRATEGY: clone
  before_script:
    - git -c url."https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.ingescape.com/".insteadOf="ssh://git@gitlab.ingescape.com:22222/" submodule update --init --remote --recursive
  script:
    - cd ./bindings/python/
    - mkdir -p ./dependencies/linux/
    - export PLATFORM="linux"
    - ./prepare_for_packaging.sh
    - python3.8 -m pip install --upgrade build
    - python3.8 -m build
    - python3.9 -m pip install --upgrade build
    - python3.9 -m build
    - |
      for whl in dist/*.whl; do
        auditwheel repair "$whl" --plat "manylinux2010_x86_64" -w ./wheelhouse/
      done
  dependencies:
    - lib-build-linux-x64
  needs:
    - test-python
    - lib-build-linux-x64
  artifacts:
    paths:
      - bindings/python/wheelhouse/*

#Publish
publish-python-package:
  stage: deploy
  tags:
    - docker
  image: ingescape/python-cmake
  variables:
    GIT_STRATEGY: clone
  when: manual
  before_script:
    - git -c url."https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.ingescape.com/".insteadOf="ssh://git@gitlab.ingescape.com:22222/" submodule update --init --remote --recursive
  script:
    - cd bindings/python
    - export IGS_MAJOR=$(grep "#define INGESCAPE_VERSION_MAJOR" ../../include/ingescape.h | cut -d' ' -f3)
    - export IGS_MINOR=$(grep "#define INGESCAPE_VERSION_MINOR" ../../include/ingescape.h | cut -d' ' -f3)
    - export IGS_PATCH=$(grep "#define INGESCAPE_VERSION_PATCH" ../../include/ingescape.h | cut -d' ' -f3)
    - echo "Prepare pyproject.toml from pyproject.toml.in"
    - sed "s/@IGS_VERSION@/\"$IGS_MAJOR.$IGS_MINOR.$IGS_PATCH\"/" pyproject.toml.in > pyproject.toml
    - echo "Prepare setup.py from setup.py.in"
    - sed "s/@IGS_VERSION@/\"$IGS_MAJOR.$IGS_MINOR.$IGS_PATCH\"/" setup.py.in > setup.py
    - python3 -m pip install --upgrade twine build
    - python3 -m build --sdist
    - |
      if [[ $CI_PROJECT_ROOT_NAMESPACE == "ingescape-private" && $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH ]]
      then
        python3 -m twine upload -u ${PYPI_USERNAME} -p ${PYPI_PASSWORD} dist/* wheelhouse/*
      fi
  dependencies:
    - package-python-wheels-windows
    - package-python-wheels-macos
    - package-python-wheels-manylinux_2_24_x86_64
    - package-python-wheels-manylinux2014_x86_64
    - package-python-wheels-manylinux2010_x86_64
  needs:
    - package-python-wheels-windows
    - package-python-wheels-macos
    - package-python-wheels-manylinux_2_24_x86_64
    - package-python-wheels-manylinux2014_x86_64
    - package-python-wheels-manylinux2010_x86_64
  artifacts:
    paths:
      - bindings/python/dist/*
      - bindings/python/wheelhouse/*

#   _____     _  _
#  / ____|  _| || |_
# | |      |_  __  _|
# | |       _| || |_
# | |____  |_  __  _|
#  \_____|   |_||_|

## Tests
test-csharp-x64-debug:
  stage: binding-test
  tags:
    - windows
  variables:
    ARCH: "x64-debug"
  script:
    - cd build/DebugX64/bindings/csharp/test/Debug/net472
    - dotnet vstest igstester.dll /Platform:x64
  dependencies:
    - lib-windows-debug-x64
  needs:
    - lib-windows-debug-x64

test-csharp-x64-release:
  stage: binding-test
  tags:
    - windows
  variables:
    ARCH: "x64-release"
  script:
    - cd build/ReleaseX64/bindings/csharp/test/Release/net472
    - dotnet vstest igstester.dll /Platform:x64
  dependencies:
    - lib-windows-release-x64
  needs:
    - lib-windows-release-x64

test-csharp-x86-debug:
  stage: binding-test
  tags:
    - windows
  variables:
    ARCH: "x86-debug"
  script:
    - cd build/DebugX86/bindings/csharp/test/Debug/net472
    - dotnet vstest igstester.dll /Platform:x86
  dependencies:
    - lib-windows-debug-x86
  needs:
    - lib-windows-debug-x86

test-csharp-x86-release:
  stage: binding-test
  tags:
    - windows
  variables:
    ARCH: "x86-release"
  script:
    - cd build/ReleaseX86/bindings/csharp/test/Release/net472
    - dotnet vstest igstester.dll /Platform:x86
  dependencies:
    - lib-windows-release-x86
  needs:
    - lib-windows-release-x86

# _____       _ _
#|  __ \     | (_)
#| |  | | ___| |___   _____ _ __ _   _
#| |  | |/ _ \ | \ \ / / _ \ '__| | | |
#| |__| |  __/ | |\ V /  __/ |  | |_| |
#|_____/ \___|_|_| \_/ \___|_|   \__, |
#                                 __/ |
#                                |___/

# Deliver installers so they can be downloaded from the website
lib-delivery-all:
  extends: .lib-build-files
  stage: delivery
  tags:
    - docker
  image: ingescape/alpine-deployment
  script:
    - echo "Setting up SSH"
    - mkdir -p ~/.ssh/
    - echo ${SSH_KNOWN_HOSTS} | base64 -d >> ~/.ssh/known_hosts
    - umask 077
    - echo ${SSH_SECRET} | base64 -d > ssh_secret
    - umask 022
    - echo "Deliver Windows x86"
    - mkdir --parents library/win32
    - mv build/ReleaseX86/ingescape-*
      library/win32/
    - ls library/win32/ | grep -v 'latest_delivery' > library/win32/latest_delivery
    - echo "Deliver Windows x64"
    - mkdir --parents library/win64
    - mv build/ReleaseX64/ingescape-*
      library/win64/
    - ls library/win64/ | grep -v 'latest_delivery' > library/win64/latest_delivery
    - echo "Deliver macos"
    - mkdir --parents library/macos
    - mv ./build/ingescape*.pkg library/macos/
    - ls library/macos/ | grep -v 'latest_delivery' > library/macos/latest_delivery
    - echo "Deliver generic Linux x64"
    - mkdir --parents library/linux_x64/
    - mv linux_x64/* library/linux_x64/
    - ls library/linux_x64/ | grep -v 'latest_delivery' > library/linux_x64/latest_delivery
    - echo "Deliver generic Linux armhf"
    - mkdir --parents library/linux_armhf
    - mv linux_armhf/* library/linux_armhf/
    - ls library/linux_armhf/ | grep -v 'latest_delivery' > library/linux_armhf/latest_delivery
    - echo "Deliver Android armv7a (softfp)"
    - mkdir --parents library/android
    - mv android/ingescape-*
      library/android/
    - ls library/android/ | grep -v 'latest_delivery' > library/android/latest_delivery
    - echo "Deliver Android aarch64"
    - mkdir --parents library/android-arm64
    - mv android-arm64/ingescape-*
      library/android-arm64/
    - ls library/android-arm64/ | grep -v 'latest_delivery' > library/android-arm64/latest_delivery
    - echo "Synchronization"
    - rsync --rsh="ssh -i ssh_secret" --recursive library ${DELIVERY_USER}@${DELIVERY_HOST}:${DELIVERY_DESTINATION}
  dependencies:
    - lib-installer-release-windows-x86
    - lib-installer-release-windows-x64
    - lib-installer-macos
    - lib-installer-linux-x64
    - lib-installer-runtime-linux-armhf
    - lib-installer-runtime-android-armv7a-softfp
    - lib-installer-runtime-android-aarch64
  rules:
    - !reference [.root_namespace, rules]
